<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Untitled RSS Feed]]></title><description><![CDATA[Untitled RSS Feed]]></description><link>https://carlomorelli.github.io</link><generator>RSS for Node</generator><lastBuildDate>Sun, 23 Apr 2017 18:59:50 GMT</lastBuildDate><atom:link href="https://carlomorelli.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Portable PostgreSQL distribution for Windows]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>For a personal project I needed finally to get a grip and move from a simple database to something more Enterprise-level.</p>
</div>
<div class="paragraph">
<p>Usually, DBs are not my thing, but if you need persistence in any project, it is almost always a mandatory route. I like simple things and I would usually go for the easiest and most straightforward option. Because my pet project was Java-based, I thus was using the well-known <a href="http://www.h2database.com/html/main.html">H2 database</a> (which is implemented in Java itself).</p>
</div>
<div class="paragraph">
<p>However the project was getting large and I needed advanced features like Connection Pooling and networked DB server&#8201;&#8212;&#8201;if you want to play in the Cloud, you definitely have to start thinking about these things sooner or later.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_choosing_the_db_server">Choosing the DB server</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In choosing the DB server, i had some constraints. First of all, my home machine is not that great&#8201;&#8212;&#8201;it&#8217;s a desktop-replacement laptop from 2012 with Windows 7, so no heavy loads thank you :-).
The choice was limited to the followings:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>MySQL / mariaDB</p>
<div class="ulist">
<ul>
<li>
<p>Pro: fast, stable, open-source</p>
</li>
<li>
<p>Con: large installation, complex on Windows</p>
</li>
</ul>
</div>
</li>
<li>
<p>PostgreSQL (aka Postgres, aka Pg)</p>
<div class="ulist">
<ul>
<li>
<p>Pro: the most deployed, documented, and developed; open-source; the installation package is &lt; 100 Mb for version 9.5</p>
</li>
<li>
<p>Con: Not very fast for big transactions</p>
</li>
</ul>
</div>
</li>
<li>
<p>Microsoft SQLServer 2017 Developer</p>
<div class="ulist">
<ul>
<li>
<p>Pro: free, the most enterprise-grade probably</p>
</li>
<li>
<p>Con: super difficult to configure, non open, and with a laaaaarge installation</p>
</li>
</ul>
</div>
</li>
<li>
<p>A NoSQL database</p>
<div class="ulist">
<ul>
<li>
<p>Pro: really fast developing field in the recent years</p>
</li>
<li>
<p>Con: it is a fragmented field, with many products specialized on different aspects (eg. ElasticSearch on clustered responsiveness, MongoDB on data reliability, ArangoDB on other features); also, generally the noSQL dbs are not lightweight</p>
</li>
</ul>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>In the end I decided to go with Postgres: it is the one I felt more confortable together with MySQL, with the advantage that installing it on Windows is relatively painless.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_install_and_configure_portable_postgres">Install and configure 'portable' Postgres</h2>
<div class="sectionbody">
<div class="paragraph">
<p>On my Windows pc I like to micromanage the system and keep things tidy. If a software I need offers the 'zip' binary archive to download instead of any MSI/EXE installer, I usually go that way.</p>
</div>
<div class="paragraph">
<p>I put normal software blobs in a <code>C:\opt</code> folder, and if it is developement-related software, I use the  <code>C:\workspace\opt</code> folder (as <code>C:\workspace</code> is the root of all my code). Yes yes I know, bad habits from Linux&#8230;&#8203; moving on :P</p>
</div>
<div class="paragraph">
<p>It happens that Pg offers precisely this: <a href="https://www.enterprisedb.com/download-postgresql-binaries" class="bare">https://www.enterprisedb.com/download-postgresql-binaries</a>. So time to download the <em>Win-x86-64</em> blob for version 9.5.6 and unpack it.</p>
</div>
<div class="paragraph">
<p>The binary blob provides not only the Pg commands, but also the handy pgAdminIII frontend. In the root folder of the unpacked software (in my case, <code>C:\workspace\opt\postgres-9.5.6\</code>), then, create the batch file <code>launch_pg.bat</code> with this content:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>REM contents
@echo off
set PATH="%~dp0\bin";%PATH%
set PGDATA=%~dp0\data
set PGDATABASE=postgres
set PGUSER=postgres
set PGPORT=5439
set PGLOCALEDIR=%~dp0\share\locale
"%~dp0\bin\initdb" -U postgres -A trust
"%~dp0\bin\pg_ctl" -D "%~dp0/data" -l logfile start
echo "#### Ready. Press space to shutdown..."
pause &gt; null
"%~dp0\bin\pg_ctl" -D "%~dp0/data" stop</code></pre>
</div>
</div>
<div class="paragraph">
<p>If you are wondering, <code>%~dp0</code> variable return the current directory&#8201;&#8212;&#8201;that is, the directory where the .bat file is being executed.</p>
</div>
<div class="paragraph">
<p><strong>WARNING</strong>: The first run of this script will initialize the database in the %PGDATA% directory with the <code>initdb</code> line. <em>For the following launches, remember to comment that line</em>.</p>
</div>
<div class="paragraph">
<p>At this point, I am basically done: I&#8217;ll just create Desktop launchers for both this .bat file and the pgAdmin.exe file that you can find in bin\. As you can understand my need is to launch (and terminate) Pg on-demand.</p>
</div>
<div class="paragraph">
<p>However, other people may want to launch Pg as system service or scheduled task (at startup). If that&#8217;s the case, I suggest to create a startup task in Windows' Task Scheduler in Control Panel.</p>
</div>
<div class="paragraph">
<p>In a next blog post, I will discuss how I managed to manage Postgres (via a connection-pool) using the canonical Java JDBC way. Stay tuned!</p>
</div>
</div>
</div>]]></description><link>https://carlomorelli.github.io/2017/04/23/Portable-PostgreSQL-distribution-for-Windows.html</link><guid isPermaLink="true">https://carlomorelli.github.io/2017/04/23/Portable-PostgreSQL-distribution-for-Windows.html</guid><category><![CDATA[Postgres]]></category><category><![CDATA[ Windows]]></category><dc:creator><![CDATA[Carlo Morelli]]></dc:creator><pubDate>Sun, 23 Apr 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Generating Docker artifacts in your Java project]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>I have been working for 6 months in a new Java/Maven project in my company. It is quite exciting, we do a lot of cutting-edge technology and of course we use massively Jenkins for continous integration.</p>
</div>
<div class="paragraph">
<p>One of the problems that we started facing at one point is <strong>what</strong> to deliver. We were used to publish our WAR artifact to Artifactory, where it unfortunately layed there gaining only dust. Then our integration-test framework would run immediately after the build (triggered by <code>mvn integration-test</code>), and instead of retrieving the artifact, would use a new build run to generate the WAR in the <code>target/</code> dir and start from there.</p>
</div>
<div class="paragraph">
<p>The test framework targets Amazon Web Services and from the Day One we decided to have everything dockerized. So the deployment script would do the following:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>build the WAR file again</p>
</li>
<li>
<p>stream it to the AWS target environment using the target Docker&#8217;s REST API (ugh, really: we streamed a ByteArray of 16 Mb of data&#8201;&#8212;&#8201;more or less&#8201;&#8212;&#8201;in HTTP rest requests)</p>
</li>
<li>
<p>on AWS, pull the Jetty base image from Docker hub</p>
</li>
<li>
<p>on AWS, package a new image</p>
</li>
<li>
<p>on AWS, spawn the container (together together with other ancillary services)</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>This is clearly not very efficient. We have a lot of tools at our avaiablity (Artifactory in primis) but we are not able to make them work in a meaningful way.</p>
</div>
<div class="paragraph">
<p>So I took myself the task to improve our workflow, thanks also to our DevOps specialist who explained me a lot of nuts&#8217;n&#8217;bolts of Docker.</p>
</div>
<div class="paragraph">
<p>It was clear that the best artifact to work with is not a WAR file, but a Docker image itself. I found out the wonderful <strong>Docker-maven-plugin</strong> by <strong>Spotify</strong> (check it out on <a href="https://github.com/spotify/docker-maven-plugin">their github repo</a>) to really suit my need. With it I can create and publish the Docker image of my app directly on Artifactory with a single Maven goal.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_prerequisites">Prerequisites</h3>
<div class="paragraph">
<p>Your Artifactory should have been enabled to run as a "Docker Registry". This basically means that we are able to push and pull images to and from it.</p>
</div>
<div class="paragraph">
<p>The biggest example of a docker registry is the official <a href="https://hub.docker.com/">Docker Hub</a> where lots of mainstream porjects publish their public images.</p>
</div>
<div class="paragraph">
<p>Talk to your network administrator for all the concerns about it. You can also experiment by creating a Docker registry on your local machine while waiting for the IT guys to answer (it usally takes some time :P ). More informations on the Docker registry can be found in the Docker guides.</p>
</div>
<div class="paragraph">
<p>Second big point is, what kind of disk space on Artifactory do you have and what bandwidth availability. A well built Docker image should not require much more than a WAR/JAR artifact takes in terms of size and upload speed, but some tuning may be needed. My suggestion: try, try and retry. Docker is not easy to understand at the beginning.</p>
</div>
</div>
<div class="sect2">
<h3 id="_efficiency_in_docker_images_creation">Efficiency in Docker images creation</h3>
<div class="paragraph">
<p>Long story short: the instruction order in your Dockerfile matters! Every line is a "layer" that Docker creates as basis for the next line, until you reach the end of the Dockerfile and the final image is done.
The Docker Registry you use is a smart service, and if it founds out that some layers that the Docker image you are pushing are already pre-existing in its own belly, it will move on to the next layer (a.k.a. the next line of the Dockerfile) directly. This means that you want to add the WAR/JAR object in the image creation as later as possible, so that a large portion of the final image is in common with other builds of your project.</p>
</div>
<div class="paragraph">
<p>For my project, I use the official Jetty image from the Docker Hub onto which I then put my WAR, and produce a new image that I then upload to our private Artifactory registry.
We achieved a delta factor between a new build and the previous build of about 31 Mbytes, whereas our WAR file weights about 26 Mbytes. Pretty neat!</p>
</div>
<div class="paragraph">
<p>This is what my Dockerfile <strong>would</strong> be:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>FROM jetty:9.3.12-jre8
COPY mywarfile-build12345.war /opt/jetty/webapps/   # this line differentiates the images one another
ENTRYPOINT ["java", "-jar", "/opt/jetty/start.jar"]</pre>
</div>
</div>
<div class="paragraph">
<p>You will see now how to produce the Docker image without needing any Dockerfile at all using Spotify&#8217;s Docker maven plugin.</p>
</div>
</div>
<div class="sect2">
<h3 id="_configuration">Configuration</h3>
<div class="paragraph">
<p>Let&#8217;s see how to configure the plugin in the project&#8217;s <code>pom.xml</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;plugin&gt;
  &lt;groupId&gt;com.spotify&lt;/groupId&gt;
  &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;
  &lt;version&gt;0.4.13&lt;/version&gt;
  &lt;configuration&gt;
    &lt;imageTags&gt;
      &lt;imageTag&gt;${project.version}-${myimage.build}&lt;/imageTag&gt;
    &lt;/imageTags&gt;
    &lt;imageName&gt;artifactory.mycompany.net/applications/myapp&lt;/imageName&gt;
    &lt;baseImage&gt;jetty:9.3.12-jre8&lt;/baseImage&gt;
    &lt;entryPoint&gt;["java", "-jar", "/opt/jetty/start.jar"]&lt;/entryPoint&gt;
    &lt;workdir&gt;/opt/jetty&lt;/workdir&gt;
    &lt;exposes&gt;8080&lt;/exposes&gt;
    &lt;resources&gt;
      &lt;resource&gt;
        &lt;targetPath&gt;/opt/jetty/webapps/&lt;/targetPath&gt;
        &lt;directory&gt;${project.build.directory}&lt;/directory&gt;
        &lt;include&gt;${project.build.finalName}.war&lt;/include&gt;
      &lt;/resource&gt;
    &lt;/resources&gt;
    &lt;serverId&gt;server_entry&lt;/serverId&gt;
    &lt;registryUrl&gt;https://artifactory.mycompany.net&lt;/registryUrl&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>As you can see the parameters resemble pretty much the intended Dockerfile.</p>
</div>
<div class="paragraph">
<p>Notice that the <strong>server_entry</strong> is the label of an entry that you have to insert into your local <code>~/.m2/settings.xml</code> as such:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;server&gt;
  &lt;id&gt;server_entry&lt;/id&gt;
  &lt;username&gt;insert_login_name_here&lt;/username&gt;
  &lt;password&gt;insert_password_here&lt;/password&gt;
  &lt;configuration&gt;
    &lt;email&gt;insert_your_email_here&lt;/email&gt;
  &lt;/configuration&gt;
&lt;/server&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Strangely enough the email field is <strong>mandatory</strong> for the current version of the spotify Docker-maven-plugin to work correctly, so watch out!</p>
</div>
</div>
<div class="sect2">
<h3 id="_usage">Usage</h3>
<div class="paragraph">
<p>You can see that what I put in the pom.xml is parametrized by some automatic Maven variables (they look like <code>${something}</code>).
There is a residual parameter which is <code>${myimage.build}</code> which in my case does not come from Maven internals, but from the command line: you can run the docker image generation like this:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>mvn docker:build -Dmyimage.build=12345</pre>
</div>
</div>
<div class="paragraph">
<p>and this will result in a Docker image created locally with tag</p>
</div>
<div class="listingblock">
<div class="content">
<pre>artifactory.mycompany.net/applications/myapp:0.0.1-SNAPSHOT-12345</pre>
</div>
</div>
<div class="paragraph">
<p>(You can check this out with <code>docker ps -a</code> command). The <code>0.0.1-SNAPSHOT</code> part here simply comes from the version of your project (on top of your <code>pom.xml</code> file), so it can be totally different in your case, of course.</p>
</div>
<div class="paragraph">
<p>To push this image to artifactory, we simply need to add a push command to the command line:</p>
</div>
<div class="listingblock">
<div class="content">
<pre>mvn docker:build -Dmyimage.build=12345 -DpushImage</pre>
</div>
</div>
<div class="paragraph">
<p>That&#8217;s it.</p>
</div>
<div class="paragraph">
<p>If you use Jenkins CI like in my case, it is easy to inject the <code>${myimage.build}</code> value from the Jenkins built-in variable <code>$BUILD_NUMBER</code>, so every successful job run will automatically push a different image version on Artifactory. Or you could just forget about it and remove the versioning entirely, and only use the <code>latest</code> tag (this is automatically managed by the Docker-maven-plugin again). Your choice :)</p>
</div>
<div class="paragraph">
<p>Have fun!</p>
</div>
</div>]]></description><link>https://carlomorelli.github.io/2016/10/19/Generating-Docker-artifacts-in-your-Java-project.html</link><guid isPermaLink="true">https://carlomorelli.github.io/2016/10/19/Generating-Docker-artifacts-in-your-Java-project.html</guid><category><![CDATA[Java]]></category><category><![CDATA[ Docker]]></category><category><![CDATA[ Maven]]></category><category><![CDATA[ Spotify]]></category><dc:creator><![CDATA[Carlo Morelli]]></dc:creator><pubDate>Wed, 19 Oct 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[Hello]]></title><description><![CDATA[<div class="paragraph">
<p>So finally I get my developer&#8217;s blog.</p>
</div>
<div class="paragraph">
<p>I will be using <a href="https://www.hubpress.io">Hubpress.io</a>. It is a cool concept, let&#8217;s see how it goes.</p>
</div>
<div class="paragraph">
<p>Stay tuned.</p>
</div>]]></description><link>https://carlomorelli.github.io/2016/10/18/Hello.html</link><guid isPermaLink="true">https://carlomorelli.github.io/2016/10/18/Hello.html</guid><category><![CDATA[none]]></category><dc:creator><![CDATA[Carlo Morelli]]></dc:creator><pubDate>Tue, 18 Oct 2016 00:00:00 GMT</pubDate></item></channel></rss>